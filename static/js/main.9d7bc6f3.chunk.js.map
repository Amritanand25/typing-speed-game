{"version":3,"sources":["components/Box.js","App.js","reportWebVitals.js","index.js"],"names":["cloud","cloudUpdated","i","length","finalScore","globalTime","Box","useState","time","setTime","score","setScore","countDown","count","timer","clearInterval","setInterval","document","getElementById","disabled","alert","value","paragraph","children","style","color","display","className","id","placeholder","rows","cols","onChange","e","target","innerText","Math","max","floor","onClick","typingField","btnHandler2","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9d7bc6f3.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\n\r\n\r\n\r\nlet cloud = 'Tearing the page away and crumpling it into a ball, he threw it over his shoulder to join its growing mass of brethren on the floor. It was dark in the office, the curtains shut to block out the intrusion of the light. He worked by a single lamp, its artificial brightness casting shadows about the room. Shadows were better than ghosts, he supposed. '\r\n\r\nlet cloudUpdated = [];\r\nfor (let i = 0; i < cloud.length; i++) {\r\n    cloudUpdated[i] = <span >{cloud[i]}</span>;\r\n}\r\nlet finalScore = 0;\r\nlet globalTime = 0;\r\n\r\n\r\n\r\nfunction Box() {\r\n    //const [btnText, setBtnText] = useState(\"Start Now\");\r\n    const [time, setTime] = useState(50);\r\n    const [score, setScore] = useState(0);\r\n    \r\n\r\n\r\n    function textAreaEnable() {\r\n        let typingField = document.getElementById('typing-area');\r\n        typingField.disabled = false;\r\n\r\n    }\r\n    function btnHandler(e) {\r\n        let button = document.getElementById('btn');\r\n        button.style.display = \"none\";\r\n\r\n    }\r\n    function btnHandler2() {\r\n        let typingField = document.getElementById('typing-area');\r\n        clearInterval(globalTime);\r\n        typingField.disabled = false;\r\n            countDown();\r\n            let paragraph = document.getElementById('para');\r\n            for (let i = 0; i < paragraph.children.length; i++) {\r\n                paragraph.children[i].style.color = \"white\"\r\n            }\r\n            document.getElementById('typing-area').value = \"\";\r\n            let button = document.getElementById('btn2');\r\n            button.style.display = \"none\";\r\n    }\r\n\r\n\r\n    function countDown() {\r\n        let count = 50;\r\n        let timer=0;\r\n        clearInterval(timer);\r\n         timer = setInterval(() => {\r\n            setTime(count--);\r\n            if (count === -1) {\r\n                globalTime = timer;\r\n                clearInterval(timer);\r\n                let typingField = document.getElementById('typing-area');\r\n                typingField.disabled = true;\r\n               \r\n                alert(\"Sorry, Time ran out. Your Final Score is \" + finalScore + \"char/sec\");\r\n                document.getElementById('typing-area').value = \"\";\r\n                setScore(0);\r\n                let paragraph = document.getElementById('para');\r\n                for (let i = 0; i < paragraph.children.length; i++) {\r\n                    paragraph.children[i].style.color = \"white\"\r\n                }\r\n                let button2 = document.getElementById('btn2');\r\n                button2.style.display = \"inline\";\r\n\r\n            }\r\n            \r\n        }, 1000);\r\n\r\n    }\r\n    function Change(e) {\r\n\r\n        let paragraph = document.getElementById('para');\r\n        let count = 0;\r\n        for (let i = 0; i < e.target.value.length; i++) {\r\n            if (paragraph.children[i].innerText === e.target.value[i]) {\r\n                paragraph.children[i].style.color = \"lightgreen\"\r\n                count++;\r\n                \r\n            } else {\r\n                paragraph.children[i].style.color = \"rgb(255, 31, 31)\"\r\n        \r\n            }\r\n        }\r\n        setScore(count);\r\n        finalScore = Math.max(finalScore, Math.floor(count/50));\r\n        if (e.target.value.length === paragraph.children.length) {\r\n            alert(\"Restart The Game and Play Again üòç\");\r\n            document.getElementById('typing-area').value = \"\";\r\n            for (let i = 0; i < paragraph.children.length; i++) {\r\n                paragraph.children[i].style.color = \"white\"\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"box\">\r\n                \r\n                <div className=\"heading\">\r\n                    <h2>üòç Typing &nbsp; Speed &nbsp; Game üòç</h2>\r\n                </div>\r\n                <div className=\"time-and-score\">\r\n                    <h4 className=\"left\">Time Left : <span id=\"timer\">{time}</span> second</h4>\r\n                    <h4 className=\"right\">Score : <span>{score} </span>char</h4>\r\n                </div>\r\n                <div className=\"game-body\">\r\n                    <div className=\"heading-h3\">\r\n                    <h3>Type the following</h3>\r\n                    </div>\r\n                    <p id=\"para\">{cloudUpdated}</p>\r\n                    <textarea placeholder=\"Type the sentences here...\" rows=\"2\" cols=\"40\" id=\"typing-area\" onChange={Change} disabled></textarea>\r\n                </div>\r\n                <div className=\"start-button\">\r\n                    <button onClick={() => { textAreaEnable(); btnHandler(); countDown() }} id=\"btn\">Start Now</button>\r\n                    <button onClick={() => { btnHandler2() }} style={{ display: \"none\" }} id=\"btn2\">Restart Now</button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Box;","// import logo from './logo.svg';\nimport Box from './components/Box'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Box />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}